<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" x="10" y="10"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum TMP36Type {" line1="    //% block=&quot;(℃)&quot; enumval=0" line2="    TMP36_temperature_C," line3="" line4="    //% block=&quot;(℉)&quot; enumval=1" line5="    TMP36_temperature_F," line6="}" numlines="7"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum RGB {" line1="    //% block=&quot;红&quot;" line2="    RED," line3="    //% block=&quot;绿&quot;" line4="    GREEN," line5="    //% block=&quot;蓝&quot;" line6="    BLUE," line7="    //% block=&quot;全部&quot;" line8="    CLEAR" line9="}" numlines="10"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum NeoPixelColors {" line1="    //% block=红" line2="    Red = 0xFF0000," line3="    //% block=橙" line4="    Orange = 0xFFA500," line5="    //% block=黄" line6="    Yellow = 0xFFFF00," line7="    //% block=绿" line8="    Green = 0x00FF00," line9="    //% block=蓝" line10="    Blue = 0x0000FF," line11="    //% block=靛蓝" line12="    Indigo = 0x4b0082," line13="    //% block=紫罗兰" line14="    Violet = 0x8a2be2," line15="    //% block=紫" line16="    Purple = 0xFF00FF," line17="    //% block=白" line18="    White = 0xFFFFFF," line19="    //% block=黑" line20="    Black = 0x000000" line21="}" numlines="22"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum NeoPixelMode {" line1="    //% block=&quot;RGB (GRB 格式)&quot;" line2="    RGB = 1," line3="    //% block=&quot;RGB+W&quot;" line4="    RGBW = 2," line5="    //% block=&quot;RGB (RGB 格式)&quot;" line6="    RGB_RGB = 3" line7="}" numlines="8"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace ICbit {" line1="" line2="    export enum DHT11_state {" line3="        //% block=&quot;温度(℃)&quot; enumval=0" line4="        DHT11_temperature_C," line5="" line6="        //% block=&quot;湿度(0~100)&quot; enumval=1" line7="        DHT11_humidity," line8="    }" line9="" line10="    export enum Distance_Unit_List {" line11="        //% block=&quot;厘米&quot; " line12="        Distance_Unit_cm," line13="" line14="        //% block=&quot;英寸&quot;" line15="        Distance_Unit_inch," line16="    }" line17="" line18="    export enum LED {" line19="        //% block=&quot;红&quot;" line20="        RED," line21="        //% block=&quot;绿&quot;" line22="        GREEN," line23="        //% block=&quot;蓝&quot;" line24="        BLUE," line25="        //% block=&quot;黄&quot;" line26="        YELLOW" line27="    }" line28="" line29="    //% blockId=&quot;readsoilmoisture&quot; block=&quot;土壤湿度传感器 %soilhumiditypin&quot;" line30="    //% subcategory=传感器" line31="    export function ReadSoilHumidity(soilmoisturepin: AnalogPin): number {" line32="        let voltage = 0;" line33="        let soilmoisture = 0;" line34="        voltage = pins.map(" line35="            pins.analogReadPin(soilmoisturepin)," line36="            0," line37="            1023," line38="            0," line39="            1023" line40="        );" line41="        soilmoisture = voltage;" line42="        return Math.round(soilmoisture);" line43="    }" line44="" line45="    //% blockId=&quot;readlightintensity&quot; block=&quot;光线传感器 %lightintensitypin&quot;" line46="    //% subcategory=传感器" line47="    export function ReadLightIntensity(lightintensitypin: AnalogPin): number {" line48="        let voltage2 = 0;" line49="        let lightintensity = 0;" line50="        voltage2 = pins.map(" line51="            pins.analogReadPin(lightintensitypin)," line52="            0," line53="            1023," line54="            0," line55="            1023" line56="        );" line57="        lightintensity = voltage2;" line58="        return Math.round(1023 - lightintensity);" line59="    }" line60="" line61="    //% blockId=&quot;readnoise&quot; block=&quot;声音传感器 %noisepin&quot;" line62="    //% subcategory=传感器" line63="    export function ReadNoise(noisepin: AnalogPin): number {" line64="        let level = 0" line65="        let voltage3 = 0" line66="        let noise = 0" line67="        let h = 0" line68="        let l = 0" line69="        let sumh = 0" line70="        let suml = 0" line71="        pins.digitalWritePin(DigitalPin.P0, 0)" line72="        for (let i = 0; i &lt; 1000; i++) {" line73="            level = level + pins.analogReadPin(noisepin)" line74="        }" line75="        level = level / 1000" line76="        for (let j = 0; j &lt; 1000; j++) {" line77="            voltage3 = pins.analogReadPin(noisepin)" line78="            if (voltage3 &gt;= level) {" line79="                h += 1" line80="                sumh = sumh + voltage3" line81="            } else {" line82="                l += 1" line83="                suml = suml + voltage3" line84="            }" line85="        }" line86="        if (h == 0) {" line87="            sumh = level" line88="        } else {" line89="            sumh = sumh / h" line90="        }" line91="        if (l == 0) {" line92="            suml = level" line93="        } else {" line94="            suml = suml / l" line95="        }" line96="        noise = sumh - suml" line97="        if (noise &lt;= 4) {" line98="            noise = pins.map(" line99="                noise," line100="                0," line101="                4," line102="                30," line103="                50" line104="            )" line105="        } else if (noise &lt;= 8) {" line106="            noise = pins.map(" line107="                noise," line108="                4," line109="                8," line110="                50," line111="                55" line112="            )" line113="        } else if (noise &lt;= 14) {" line114="            noise = pins.map(" line115="                noise," line116="                9," line117="                14," line118="                55," line119="                60" line120="            )" line121="        } else if (noise &lt;= 32) {" line122="            noise = pins.map(" line123="                noise," line124="                15," line125="                32," line126="                60," line127="                70" line128="            )" line129="        } else if (noise &lt;= 60) {" line130="            noise = pins.map(" line131="                noise," line132="                33," line133="                60," line134="                70," line135="                75" line136="            )" line137="        } else if (noise &lt;= 100) {" line138="            noise = pins.map(" line139="                noise," line140="                61," line141="                100," line142="                75," line143="                80" line144="            )" line145="        } else if (noise &lt;= 150) {" line146="            noise = pins.map(" line147="                noise," line148="                101," line149="                150," line150="                80," line151="                85" line152="            )" line153="        } else if (noise &lt;= 231) {" line154="            noise = pins.map(" line155="                noise," line156="                151," line157="                231," line158="                85," line159="                90" line160="            )" line161="        } else {" line162="            noise = pins.map(" line163="                noise," line164="                231," line165="                1023," line166="                90," line167="                120" line168="            )" line169="        }" line170="        noise = Math.round(noise)" line171="        return Math.round(noise)" line172="    }" line173="" line174="    /**" line175="    * toggle fans" line176="    */" line177="    //% blockId=fans block=&quot;电机风扇 %pin 切换至 $fanstate || 速度 %speed&quot;" line178="    //% fanstate.shadow=&quot;toggleOnOff&quot;" line179="    //% speed.min=0 speed.max=1023" line180="    //% expandableArgumentMode=&quot;toggle&quot;" line181="    //% subcategory=执行器" line182="    export function motorFan(pin: AnalogPin, fanstate: boolean, speed: number = 1023): void {" line183="        if (fanstate) {" line184="            pins.analogSetPeriod(pin, 1023)" line185="            pins.analogWritePin(pin, Math.map(speed, 0, 1023, 0, 1023))" line186="        }" line187="        else {" line188="            pins.analogWritePin(pin, 0)" line189="            speed = 0" line190="        }" line191="    }" line192="" line193="    /**" line194="    * get Ultrasonic distance" line195="    */" line196="    //% blockId=sonarbit block=&quot;超声波传感器 引脚 %pinT 距离 %distance_unit&quot;" line197="    //% distance_unit.fieldEditor=&quot;gridpicker&quot;" line198="    //% distance_unit.fieldOptions.columns=2" line199="    //% subcategory=传感器" line200="    export function ultrasoundSensor(pinT: DigitalPin, distance_unit: Distance_Unit_List): number {" line201="        pins.setPull(pinT, PinPullMode.PullNone)" line202="        pins.digitalWritePin(pinT, 0)" line203="        control.waitMicros(2)" line204="        pins.digitalWritePin(pinT, 1)" line205="        control.waitMicros(10)" line206="        pins.digitalWritePin(pinT, 0)" line207="" line208="        // read pulse" line209="        let d = pins.pulseIn(pinT, PulseValue.High, 25000)" line210="        let distance = d * 9 / 6 / 58" line211="" line212="        if (distance &gt; 400) {" line213="            distance = 0" line214="        }" line215="        switch (distance_unit) {" line216="            case Distance_Unit_List.Distance_Unit_cm:" line217="                return Math.floor(distance)  //cm" line218="                break" line219="            case Distance_Unit_List.Distance_Unit_inch:" line220="                return Math.floor(distance / 254)   //inch" line221="                break" line222="            default:" line223="                return 0" line224="        }" line225="    }" line226="" line227="    /**" line228="    * toggle led" line229="    */" line230="    //% blockId=LED block=&quot;LED %pin 颜色 %LED 切换到 $ledstate || 亮度 %brightness&quot;" line231="    //% brightness.min=0 brightness.max=1023" line232="    //% ledstate.shadow=&quot;toggleOnOff&quot;" line233="    //% expandableArgumentMode=&quot;toggle&quot;" line234="    //% subcategory=执行器" line235="    export function ledBrightness(pin: AnalogPin, colorUnit: LED, ledstate: boolean, brightness: number = 1023): void {" line236="        if (ledstate) {" line237="            pins.analogSetPeriod(pin, 1023)" line238="            pins.analogWritePin(pin, Math.map(brightness, 0, 1023, 0, 1023))" line239="        }" line240="        else {" line241="            pins.analogWritePin(pin, 0)" line242="            brightness = 0" line243="        }" line244="    }" line245="" line246="    const PCA9685_ADD = 0x40" line247="    const MODE1 = 0x00" line248="    const LED0_ON_L = 0x06" line249="    const PRESCALE = 0xFE" line250="" line251="    let initialized = false" line252="" line253="    export enum enPos {" line254="        //% blockId=&quot;forward&quot; block=&quot;前进&quot;" line255="        forward = 1," line256="        //% blockId=&quot;stop&quot; block=&quot;后退&quot;" line257="        stop = 2" line258="    }" line259="" line260="    export enum enServo {" line261="        S1 = 0," line262="        S2," line263="        S3," line264="        S4" line265="    }" line266="" line267="    export enum enMotors {" line268="        M1 = 8," line269="        M2 = 10," line270="        M3 = 13," line271="        M4 = 15" line272="    }" line273="" line274="    function i2cwrite(addr: number, reg: number, value: number) {" line275="        let buf = pins.createBuffer(2)" line276="        buf[0] = reg" line277="        buf[1] = value" line278="        pins.i2cWriteBuffer(addr, buf)" line279="    }" line280="" line281="    function i2cread(addr: number, reg: number) {" line282="        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);" line283="        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);" line284="        return val;" line285="    }" line286="" line287="    function initPCA9685(): void {" line288="        i2cwrite(PCA9685_ADD, MODE1, 0x00)" line289="        setFreq(50);" line290="        initialized = true" line291="    }" line292="" line293="    function setFreq(freq: number): void {" line294="        // Constrain the frequency" line295="        let prescaleval = 25000000;" line296="        prescaleval /= 4096;" line297="        prescaleval /= freq;" line298="        prescaleval -= 1;" line299="        let prescale = prescaleval; //Math.Floor(prescaleval + 0.5);" line300="        let oldmode = i2cread(PCA9685_ADD, MODE1);" line301="        let newmode = (oldmode &amp; 0x7F) | 0x10; // sleep" line302="        i2cwrite(PCA9685_ADD, MODE1, newmode); // go to sleep" line303="        i2cwrite(PCA9685_ADD, PRESCALE, prescale); // set the prescaler" line304="        i2cwrite(PCA9685_ADD, MODE1, oldmode);" line305="        control.waitMicros(5000);" line306="        i2cwrite(PCA9685_ADD, MODE1, oldmode | 0xa1);" line307="    }" line308="" line309="    function setPwm(channel: number, on: number, off: number): void {" line310="        if (channel &lt; 0 || channel &gt; 15)" line311="            return;" line312="        if (!initialized) {" line313="            initPCA9685();" line314="        }" line315="        let buf2 = pins.createBuffer(5);" line316="        buf2[0] = LED0_ON_L + 4 * channel;" line317="        buf2[1] = on &amp; 0xff;" line318="        buf2[2] = (on &gt;&gt; 8) &amp; 0xff;" line319="        buf2[3] = off &amp; 0xff;" line320="        buf2[4] = (off &gt;&gt; 8) &amp; 0xff;" line321="        pins.i2cWriteBuffer(PCA9685_ADD, buf2);" line322="    }" line323="" line324="    //% blockId=SuperBit_Servo block=&quot;舵机(180°)| %num|角度 %value&quot;" line325="    //% num.min=1 num.max=4 value.min=0 value.max=180" line326="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=20" line327="    //% subcategory=执行器" line328="    export function Servo(num: enServo, value: number): void {" line329="" line330="        // 50hz: 20,000 us" line331="        let us = (value * 1800 / 180 + 600); // 0.6 ~ 2.4" line332="        let pwm = us * 4096 / 20000;" line333="        setPwm(num, 0, pwm);" line334="" line335="    }" line336="" line337="    //% blockId=SuperBit_Servo3 block=&quot;舵机(360°)| %num|姿态 %pos|角度 %value&quot;" line338="    //% num.min=1 num.max=4 value.min=0 value.max=90" line339="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=20" line340="    //% subcategory=执行器" line341="    export function Servo3(num: enServo, pos: enPos, value: number): void {" line342="" line343="        // 50hz: 20,000 us" line344="" line345="        if (pos == enPos.stop) {" line346="            let us2 = (86 * 1800 / 180 + 600); // 0.6 ~ 2.4" line347="            let pwm2 = us2 * 4096 / 20000;" line348="            setPwm(num, 0, pwm2);" line349="        }" line350="        else if (pos == enPos.forward) { //0-90 -&gt; 90 - 0" line351="            let us3 = ((90 - value) * 1800 / 180 + 600); // 0.6 ~ 2.4" line352="            let pwm3 = us3 * 4096 / 20000;" line353="            setPwm(num, 0, pwm3);" line354="        }" line355="" line356="    }" line357="" line358="    //% blockId=SuperBit_MotorRun block=&quot;电机|%index|速度(-255~255) %speed&quot;" line359="    //% speed.min=-255 speed.max=255" line360="    //% subcategory=执行器" line361="    export function MotorRun(index: enMotors, speed: number): void {" line362="        if (!initialized) {" line363="            initPCA9685()" line364="        }" line365="        speed = speed * 16; // map 255 to 4096" line366="        if (speed &gt;= 4096) {" line367="            speed = 4095" line368="        }" line369="        if (speed &lt;= -4096) {" line370="            speed = -4095" line371="        }" line372="" line373="        let a = index" line374="        let b = index + 1" line375="" line376="        if (a &gt; 10) {" line377="            if (speed &gt;= 0) {" line378="                setPwm(a, 0, speed)" line379="                setPwm(b, 0, 0)" line380="            } else {" line381="                setPwm(a, 0, 0)" line382="                setPwm(b, 0, -speed)" line383="            }" line384="        }" line385="        else {" line386="            if (speed &gt;= 0) {" line387="                setPwm(b, 0, speed)" line388="                setPwm(a, 0, 0)" line389="            } else {" line390="                setPwm(b, 0, 0)" line391="                setPwm(a, 0, -speed)" line392="            }" line393="        }" line394="    }" line395="" line396="    //% blockId=&quot;elecmagnet&quot; block=&quot;电磁铁 %pin 切换至 %magState || 磁力 %force&quot;" line397="    //% magState.shadow=&quot;toggleOnOff&quot;" line398="    //% force.min=0 force.max=1023" line399="    //% expandableArgumentMode=&quot;toggle&quot;" line400="    //% subcategory=执行器" line401="    export function elecmagnet(pin: AnalogPin, magState: boolean, force: number = 1023): void {" line402="" line403="        if (magState) {" line404="            pins.analogSetPeriod(pin, 1023)" line405="            pins.analogWritePin(pin, Math.map(force, 0, 1023, 0, 1023))" line406="        }" line407="        else {" line408="            pins.analogWritePin(pin, 0)" line409="            force = 0" line410="        }" line411="    }" line412="" line413="    //% blockId=&quot;laser_controller&quot; block=&quot;激光 %pin 切换至 %laserState || 激光 %intensity&quot;" line414="    //% laserState.shadow=&quot;toggleOnOff&quot;" line415="    //% intensity.min=0 intensity.max=1023" line416="    //% expandableArgumentMode=&quot;toggle&quot;" line417="    //% subcategory=执行器" line418="    export function laserController(pin: AnalogPin, laserState: boolean, intensity: number = 1023): void {" line419="" line420="        if (laserState) {" line421="            pins.analogSetPeriod(pin, 1023)" line422="            pins.analogWritePin(pin, Math.map(intensity, 0, 1023, 0, 1023))" line423="        }" line424="        else {" line425="            pins.analogWritePin(pin, 0)" line426="            intensity = 0" line427="        }" line428="    }" line429="" line430="    //% blockId=&quot;octopus_ReadWaterLevel&quot; block=&quot;水位传感器 %waterlevelpin&quot;" line431="    //% subcategory=传感器" line432="    export function ReadWaterLevel(waterlevelpin: AnalogPin): number {" line433="        let voltage4 = 0;" line434="        let waterLevel = 0;" line435="        voltage4 = pins.map(" line436="            pins.analogReadPin(waterlevelpin)," line437="            0," line438="            1023," line439="            0," line440="            1023" line441="        );" line442="        waterLevel = voltage4;" line443="        return Math.round(waterLevel);" line444="    }" line445="" line446="    //% blockId=&quot;ReadGasConcentration&quot; block=&quot;可燃气体传感器 %gasconcentrationpin&quot;" line447="    //% subcategory=传感器" line448="    export function ReadGasConcentration(gasconcentrationpin: AnalogPin): number {" line449="        let voltage5 = 0;" line450="        let gasConcentration = 0;" line451="        voltage5 = pins.map(" line452="            pins.analogReadPin(gasconcentrationpin)," line453="            0," line454="            1023," line455="            0," line456="            1023" line457="        );" line458="        gasConcentration = voltage5;" line459="        return Math.round(gasConcentration);" line460="    }" line461="" line462="    //% blockId=&quot;Readflame&quot; block=&quot;火焰传感器 %flamepin&quot;" line463="    //% subcategory=传感器" line464="    export function Readflame(flamepin: AnalogPin): number {" line465="        let voltage6 = 0;" line466="        let flame = 0;" line467="        voltage6 = pins.map(" line468="            pins.analogReadPin(flamepin)," line469="            0," line470="            1023," line471="            0," line472="            1023" line473="        );" line474="        flame = voltage6;" line475="        return Math.round(flame);" line476="    }" line477="" line478="    //% blockId=&quot;ReadGrayLevel&quot; block=&quot;灰度传感器 %graylevelpin&quot;" line479="    //% subcategory=传感器" line480="    export function ReadGrayLevel(graylevelpin: AnalogPin): number {" line481="        let voltage7 = 0;" line482="        let grayLevel = 0;" line483="        voltage7 = pins.map(" line484="            pins.analogReadPin(graylevelpin)," line485="            0," line486="            1023," line487="            80," line488="            1023" line489="        );" line490="        grayLevel = voltage7;" line491="        return Math.round(grayLevel);" line492="    }" line493="" line494="    //% blockId=&quot;readWaterTemp&quot; block=&quot;防水温度传感器 %waterproofpin&quot;" line495="    //% subcategory=传感器" line496="    export function readWaterTemp(waterproofpin: AnalogPin): number {" line497="        let voltage22 = 0;" line498="        let waterProofTemp = 0;" line499="        voltage22 = pins.map(" line500="            pins.analogReadPin(waterproofpin)," line501="            0," line502="            1023," line503="            0," line504="            1023" line505="        );" line506="        waterProofTemp = voltage22;" line507="        return Math.round(1023 - waterProofTemp);" line508="    }" line509="" line510="    //% blockId=potentiometerRead" line511="    //% block=&quot;电位器 %pin&quot;" line512="    //% subcategory=传感器" line513="    export function potentiometerRead(pin: AnalogPin): number {" line514="        return pins.analogReadPin(pin);" line515="    }" line516="" line517="    //% blockId=buttonState" line518="    //% block=&quot;按钮传感器 %pin&quot;" line519="    //% subcategory=传感器" line520="    export function buttonState(pin: DigitalPin): number {" line521="        return pins.digitalReadPin(pin);" line522="    }" line523="" line524="    //% blockId=closeState" line525="    //% block=&quot;近距离光电传感器 %pin&quot;" line526="    //% subcategory=传感器" line527="    export function closeState(pin: DigitalPin): number {" line528="        return pins.digitalReadPin(pin);" line529="    }" line530="" line531="    //% blockId=farState" line532="    //% block=&quot;远距离光电传感器 %pin&quot;" line533="    //% subcategory=传感器" line534="    export function farState(pin: DigitalPin): number {" line535="        return pins.digitalReadPin(pin);" line536="    }" line537="" line538="    //% blockId=hState" line539="    //% block=&quot;霍尔传感器 %pin&quot;" line540="    //% subcategory=传感器" line541="    export function hState(pin: DigitalPin): number {" line542="        return pins.digitalReadPin(pin);" line543="    }" line544="" line545="    enum LCS_Constants {" line546="        // Constants" line547="        ADDRESS = 0x29," line548="        ID = 0x12, // Register should be equal to 0x44 for the TCS34721 or TCS34725, or 0x4D for the TCS34723 or TCS34727." line549="" line550="        COMMAND_BIT = 0x80," line551="" line552="        ENABLE = 0x00," line553="        ENABLE_AIEN = 0x10, // RGBC Interrupt Enable" line554="        ENABLE_WEN = 0x08, // Wait enable - Writing 1 activates the wait timer" line555="        ENABLE_AEN = 0x02, // RGBC Enable - Writing 1 actives the ADC, 0 disables it" line556="        ENABLE_PON = 0x01, // Power on - Writing 1 activates the internal oscillator, 0 disables it" line557="        ATIME = 0x01, // Integration time" line558="        WTIME = 0x03, // Wait time (if ENABLE_WEN is asserted)" line559="        AILTL = 0x04, // Clear channel lower interrupt threshold" line560="        AILTH = 0x05," line561="        AIHTL = 0x06, // Clear channel upper interrupt threshold" line562="        AIHTH = 0x07," line563="        PERS = 0x0C, // Persistence register - basic SW filtering mechanism for interrupts" line564="        PERS_NONE = 0x00, // Every RGBC cycle generates an interrupt" line565="        PERS_1_CYCLE = 0x01, // 1 clean channel value outside threshold range generates an interrupt" line566="        PERS_2_CYCLE = 0x02, // 2 clean channel values outside threshold range generates an interrupt" line567="        PERS_3_CYCLE = 0x03, // 3 clean channel values outside threshold range generates an interrupt" line568="        PERS_5_CYCLE = 0x04, // 5 clean channel values outside threshold range generates an interrupt" line569="        PERS_10_CYCLE = 0x05, // 10 clean channel values outside threshold range generates an interrupt" line570="        PERS_15_CYCLE = 0x06, // 15 clean channel values outside threshold range generates an interrupt" line571="        PERS_20_CYCLE = 0x07, // 20 clean channel values outside threshold range generates an interrupt" line572="        PERS_25_CYCLE = 0x08, // 25 clean channel values outside threshold range generates an interrupt" line573="        PERS_30_CYCLE = 0x09, // 30 clean channel values outside threshold range generates an interrupt" line574="        PERS_35_CYCLE = 0x0A, // 35 clean channel values outside threshold range generates an interrupt" line575="        PERS_40_CYCLE = 0x0B, // 40 clean channel values outside threshold range generates an interrupt" line576="        PERS_45_CYCLE = 0x0C, // 45 clean channel values outside threshold range generates an interrupt" line577="        PERS_50_CYCLE = 0x0D, // 50 clean channel values outside threshold range generates an interrupt" line578="        PERS_55_CYCLE = 0x0E, // 55 clean channel values outside threshold range generates an interrupt" line579="        PERS_60_CYCLE = 0x0F, // 60 clean channel values outside threshold range generates an interrupt" line580="        CONFIG = 0x0D," line581="        CONFIG_WLONG = 0x02, // Choose between short and long (12x) wait times via WTIME" line582="        CONTROL = 0x0F, // Set the gain level for the sensor" line583="        STATUS = 0x13," line584="        STATUS_AINT = 0x10, // RGBC Clean channel interrupt" line585="        STATUS_AVALID = 0x01, // Indicates that the RGBC channels have completed an integration cycle" line586="" line587="        CDATAL = 0x14, // Clear channel data" line588="        CDATAH = 0x15," line589="        RDATAL = 0x16, // Red channel data" line590="        RDATAH = 0x17," line591="        GDATAL = 0x18, // Green channel data" line592="        GDATAH = 0x19," line593="        BDATAL = 0x1A, // Blue channel data" line594="        BDATAH = 0x1B," line595="" line596="        GAIN_1X = 0x00, //  1x gain" line597="        GAIN_4X = 0x01, //  4x gain" line598="        GAIN_16X = 0x02, // 16x gain" line599="        GAIN_60X = 0x03  // 60x gain" line600="    }" line601="" line602="    let LCS_integration_time_val = 0" line603="" line604="    // I2C functions" line605="" line606="    function I2C_WriteReg8(addr: number, reg: number, val: number) {" line607="        let buf3 = pins.createBuffer(2)" line608="        buf3.setNumber(NumberFormat.UInt8BE, 0, reg)" line609="        buf3.setNumber(NumberFormat.UInt8BE, 1, val)" line610="        pins.i2cWriteBuffer(addr, buf3)" line611="    }" line612="" line613="    function I2C_ReadReg8(addr: number, reg: number): number {" line614="        let buf4 = pins.createBuffer(1)" line615="        buf4.setNumber(NumberFormat.UInt8BE, 0, reg)" line616="        pins.i2cWriteBuffer(addr, buf4)" line617="        buf4 = pins.i2cReadBuffer(addr, 1)" line618="        return buf4.getNumber(NumberFormat.UInt8BE, 0);" line619="    }" line620="" line621="    function I2C_ReadReg16(addr: number, reg: number): number {" line622="        let buf5 = pins.createBuffer(1)" line623="        buf5.setNumber(NumberFormat.UInt8BE, 0, reg)" line624="        pins.i2cWriteBuffer(addr, buf5)" line625="        buf5 = pins.i2cReadBuffer(addr, 2)" line626="        // Little endian" line627="        return ((buf5.getNumber(NumberFormat.UInt8BE, 1) &lt;&lt; 8) | buf5.getNumber(NumberFormat.UInt8BE, 0));" line628="    }" line629="" line630="    //% blockId=&quot;initialize_sensor&quot; block=&quot;初始化颜色传感器&quot;" line631="    //% subcategory=&quot;传感器&quot;" line632="    export function LCS_initialize() {" line633="        // Make sure we're connected to the right sensor." line634="        let chip_id = I2C_ReadReg8(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.ID))" line635="" line636="        if (chip_id != 0x44) {" line637="            return // Incorrect chip ID" line638="        }" line639="" line640="        // Set default integration time and gain." line641="        LCS_set_integration_time(0.0048)" line642="        LCS_set_gain(LCS_Constants.GAIN_16X)" line643="" line644="        // Enable the device (by default, the device is in power down mode on bootup)." line645="        LCS_enable()" line646="    }" line647="" line648="    function LCS_enable() {" line649="        // Set the power and enable bits." line650="        I2C_WriteReg8(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.ENABLE), LCS_Constants.ENABLE_PON)" line651="        basic.pause(10) // not sure if this is right    time.sleep(0.01) // FIXME delay for 10ms" line652="" line653="        I2C_WriteReg8(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.ENABLE), (LCS_Constants.ENABLE_PON | LCS_Constants.ENABLE_AEN))" line654="    }" line655="" line656="    function LCS_set_integration_time(time: number) {" line657="        let val2 = 0x100 - (time / 0.0024) // FIXME was cast to int type" line658="        if (val2 &gt; 255) {" line659="            val2 = 255" line660="        } else if (val2 &lt; 0) {" line661="            val2 = 0" line662="        }" line663="        I2C_WriteReg8(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.ATIME), val2)" line664="        LCS_integration_time_val = val2" line665="    }" line666="" line667="    function LCS_set_gain(gain: number) {" line668="        I2C_WriteReg8(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.CONTROL), gain)" line669="    }" line670="" line671="    function LCS_set_led_state(state: boolean) {" line672="        I2C_WriteReg8(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.PERS), LCS_Constants.PERS_NONE)" line673="        let val3 = I2C_ReadReg8(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.ENABLE))" line674="        if (state) {" line675="            val3 |= LCS_Constants.ENABLE_AIEN" line676="        } else {" line677="            val3 &amp;= ~LCS_Constants.ENABLE_AIEN" line678="        }" line679="        I2C_WriteReg8(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.ENABLE), val3)" line680="" line681="        basic.pause(2 * (256 - LCS_integration_time_val) * 2.4) // delay for long enough for there to be new (post-change) complete values available" line682="    }" line683="" line684="    //% blockId=&quot;octopus_getSensorData&quot; block=&quot;读取颜色值 %colorId&quot;" line685="    //% subcategory=&quot;传感器&quot;" line686="    export function getColorData(color: RGB): number {" line687="        basic.pause((256 - LCS_integration_time_val) * 2.4);" line688="        let sum = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.CDATAL));" line689="        let vue = 0;" line690="        switch (color) {" line691="            case RGB.RED:" line692="                vue = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.RDATAL));" line693="                break;" line694="            case RGB.GREEN:" line695="                vue = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.GDATAL));" line696="                break;" line697="            case RGB.BLUE:" line698="                vue = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.BDATAL));" line699="                break;" line700="            case RGB.CLEAR:" line701="                return sum;" line702="                break;" line703="" line704="        }" line705="        vue = Math.floor(vue / sum * 255);" line706="" line707="        serial.writeLine(&quot;val: &quot; + vue);" line708="        return vue;" line709="    }" line710="" line711="" line712="    function LCS_get_raw_data(delay: boolean = false): number[] {" line713="        if (delay) {" line714="            // Delay for the integration time to allow reading immediately after the previous read." line715="            basic.pause((256 - LCS_integration_time_val) * 2.4)" line716="        }" line717="" line718="        let div = (256 - LCS_integration_time_val) * 1024" line719="        let rgbc = [0, 0, 0, 0]" line720="        rgbc[0] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.RDATAL)) / div" line721="        rgbc[1] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.GDATAL)) / div" line722="        rgbc[2] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.BDATAL)) / div" line723="        rgbc[3] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.CDATAL)) / div" line724="        if (rgbc[0] &gt; 1) {" line725="            rgbc[0] = 1" line726="        }" line727="        if (rgbc[1] &gt; 1) {" line728="            rgbc[1] = 1" line729="        }" line730="        if (rgbc[2] &gt; 1) {" line731="            rgbc[2] = 1" line732="        }" line733="        if (rgbc[3] &gt; 1) {" line734="            rgbc[3] = 1" line735="        }" line736="        return rgbc" line737="    }" line738="" line739="    let font: number[] = [];" line740="    font[0] = 0x0022d422;" line741="    font[1] = 0x0022d422;" line742="    font[2] = 0x0022d422;" line743="    font[3] = 0x0022d422;" line744="    font[4] = 0x0022d422;" line745="    font[5] = 0x0022d422;" line746="    font[6] = 0x0022d422;" line747="    font[7] = 0x0022d422;" line748="    font[8] = 0x0022d422;" line749="    font[9] = 0x0022d422;" line750="    font[10] = 0x0022d422;" line751="    font[11] = 0x0022d422;" line752="    font[12] = 0x0022d422;" line753="    font[13] = 0x0022d422;" line754="    font[14] = 0x0022d422;" line755="    font[15] = 0x0022d422;" line756="    font[16] = 0x0022d422;" line757="    font[17] = 0x0022d422;" line758="    font[18] = 0x0022d422;" line759="    font[19] = 0x0022d422;" line760="    font[20] = 0x0022d422;" line761="    font[21] = 0x0022d422;" line762="    font[22] = 0x0022d422;" line763="    font[23] = 0x0022d422;" line764="    font[24] = 0x0022d422;" line765="    font[25] = 0x0022d422;" line766="    font[26] = 0x0022d422;" line767="    font[27] = 0x0022d422;" line768="    font[28] = 0x0022d422;" line769="    font[29] = 0x0022d422;" line770="    font[30] = 0x0022d422;" line771="    font[31] = 0x0022d422;" line772="    font[32] = 0x00000000;" line773="    font[33] = 0x000002e0;" line774="    font[34] = 0x00018060;" line775="    font[35] = 0x00afabea;" line776="    font[36] = 0x00aed6ea;" line777="    font[37] = 0x01991133;" line778="    font[38] = 0x010556aa;" line779="    font[39] = 0x00000060;" line780="    font[40] = 0x000045c0;" line781="    font[41] = 0x00003a20;" line782="    font[42] = 0x00051140;" line783="    font[43] = 0x00023880;" line784="    font[44] = 0x00002200;" line785="    font[45] = 0x00021080;" line786="    font[46] = 0x00000100;" line787="    font[47] = 0x00111110;" line788="    font[48] = 0x0007462e;" line789="    font[49] = 0x00087e40;" line790="    font[50] = 0x000956b9;" line791="    font[51] = 0x0005d629;" line792="    font[52] = 0x008fa54c;" line793="    font[53] = 0x009ad6b7;" line794="    font[54] = 0x008ada88;" line795="    font[55] = 0x00119531;" line796="    font[56] = 0x00aad6aa;" line797="    font[57] = 0x0022b6a2;" line798="    font[58] = 0x00000140;" line799="    font[59] = 0x00002a00;" line800="    font[60] = 0x0008a880;" line801="    font[61] = 0x00052940;" line802="    font[62] = 0x00022a20;" line803="    font[63] = 0x0022d422;" line804="    font[64] = 0x00e4d62e;" line805="    font[65] = 0x000f14be;" line806="    font[66] = 0x000556bf;" line807="    font[67] = 0x0008c62e;" line808="    font[68] = 0x0007463f;" line809="    font[69] = 0x0008d6bf;" line810="    font[70] = 0x000094bf;" line811="    font[71] = 0x00cac62e;" line812="    font[72] = 0x000f909f;" line813="    font[73] = 0x000047f1;" line814="    font[74] = 0x0017c629;" line815="    font[75] = 0x0008a89f;" line816="    font[76] = 0x0008421f;" line817="    font[77] = 0x01f1105f;" line818="    font[78] = 0x01f4105f;" line819="    font[79] = 0x0007462e;" line820="    font[80] = 0x000114bf;" line821="    font[81] = 0x000b6526;" line822="    font[82] = 0x010514bf;" line823="    font[83] = 0x0004d6b2;" line824="    font[84] = 0x0010fc21;" line825="    font[85] = 0x0007c20f;" line826="    font[86] = 0x00744107;" line827="    font[87] = 0x01f4111f;" line828="    font[88] = 0x000d909b;" line829="    font[89] = 0x00117041;" line830="    font[90] = 0x0008ceb9;" line831="    font[91] = 0x0008c7e0;" line832="    font[92] = 0x01041041;" line833="    font[93] = 0x000fc620;" line834="    font[94] = 0x00010440;" line835="    font[95] = 0x01084210;" line836="    font[96] = 0x00000820;" line837="    font[97] = 0x010f4a4c;" line838="    font[98] = 0x0004529f;" line839="    font[99] = 0x00094a4c;" line840="    font[100] = 0x000fd288;" line841="    font[101] = 0x000956ae;" line842="    font[102] = 0x000097c4;" line843="    font[103] = 0x0007d6a2;" line844="    font[104] = 0x000c109f;" line845="    font[105] = 0x000003a0;" line846="    font[106] = 0x0006c200;" line847="    font[107] = 0x0008289f;" line848="    font[108] = 0x000841e0;" line849="    font[109] = 0x01e1105e;" line850="    font[110] = 0x000e085e;" line851="    font[111] = 0x00064a4c;" line852="    font[112] = 0x0002295e;" line853="    font[113] = 0x000f2944;" line854="    font[114] = 0x0001085c;" line855="    font[115] = 0x00012a90;" line856="    font[116] = 0x010a51e0;" line857="    font[117] = 0x010f420e;" line858="    font[118] = 0x00644106;" line859="    font[119] = 0x01e8221e;" line860="    font[120] = 0x00093192;" line861="    font[121] = 0x00222292;" line862="    font[122] = 0x00095b52;" line863="    font[123] = 0x0008fc80;" line864="    font[124] = 0x000003e0;" line865="    font[125] = 0x000013f1;" line866="    font[126] = 0x00841080;" line867="    font[127] = 0x0022d422;" line868="" line869="    let _I2CAddr = 0;" line870="    let _screen = pins.createBuffer(1025);" line871="    let _buf2 = pins.createBuffer(2);" line872="    let _buf3 = pins.createBuffer(3);" line873="    let _buf4 = pins.createBuffer(4);" line874="    let _ZOOM = 1;" line875="" line876="    function cmd1(d: number) {" line877="        let n = d % 256;" line878="        pins.i2cWriteNumber(_I2CAddr, n, NumberFormat.UInt16BE);" line879="    }" line880="" line881="    function cmd2(d1: number, d2: number) {" line882="        _buf3[0] = 0;" line883="        _buf3[1] = d1;" line884="        _buf3[2] = d2;" line885="        pins.i2cWriteBuffer(_I2CAddr, _buf3);" line886="    }" line887="" line888="    function cmd3(d1: number, d2: number, d3: number) {" line889="        _buf4[0] = 0;" line890="        _buf4[1] = d1;" line891="        _buf4[2] = d2;" line892="        _buf4[3] = d3;" line893="        pins.i2cWriteBuffer(_I2CAddr, _buf4);" line894="    }" line895="" line896="    function set_pos(col: number = 0, page: number = 0) {" line897="        cmd1(0xb0 | page) // page number" line898="        let c = col * (_ZOOM + 1)" line899="        cmd1(0x00 | (c % 16)) // lower start column address" line900="        cmd1(0x10 | (c &gt;&gt; 4)) // upper start column address    " line901="    }" line902="" line903="    // clear bit" line904="    function clrbit(d: number, b: number): number {" line905="        if (d &amp; (1 &lt;&lt; b))" line906="            d -= (1 &lt;&lt; b)" line907="        return d" line908="    }" line909="" line910="    /**" line911="     * set pixel in OLED" line912="     * @param x is X alis, eg: 0" line913="     * @param y is Y alis, eg: 0" line914="     * @param color is dot color, eg: 1" line915="     */" line916="    //% blockId=&quot;OLED12864_I2C_PIXEL&quot; block=&quot;设置 pixel 在 x %x|y %y|颜色 %color&quot;" line917="    //% parts=OLED12864_I2C trackArgs=0" line918="    //% group=&quot;OLED显示屏&quot; subcategory=执行器" line919="    //% weight=80 blockGap=10 color=#0855AA" line920="    export function pixel(x: number, y: number, color: number = 1) {" line921="        let page = y &gt;&gt; 3" line922="        let shift_page = y % 8" line923="        let ind = x * (_ZOOM + 1) + page * 128 + 1" line924="        let e = (color) ? (_screen[ind] | (1 &lt;&lt; shift_page)) : clrbit(_screen[ind], shift_page)" line925="        _screen[ind] = e" line926="        set_pos(x, page)" line927="        if (_ZOOM) {" line928="            _screen[ind + 1] = e" line929="            _buf3[0] = 0x40" line930="            _buf3[1] = _buf3[2] = e" line931="            pins.i2cWriteBuffer(_I2CAddr, _buf3)" line932="        }" line933="        else {" line934="            _buf2[0] = 0x40" line935="            _buf2[1] = e" line936="            pins.i2cWriteBuffer(_I2CAddr, _buf2)" line937="        }" line938="    }" line939="" line940="    /**" line941="     * show text in OLED" line942="     * @param x is X alis, eg: 0" line943="     * @param y is Y alis, eg: 0" line944="     * @param s is the text will be show, eg: 'Hello!'" line945="     * @param color is string color, eg: 1" line946="     */" line947="    //% blockId=&quot;OLED12864_I2C_SHOWSTRING&quot; block=&quot;显示 string 在 x %x|y %y|文本 %s|颜色 %color&quot;" line948="    //% parts=OLED12864_I2C trackArgs=0" line949="    //% group=&quot;OLED显示屏&quot; subcategory=执行器" line950="    //% weight=80 blockGap=10 color=#0855AA" line951="    export function showString(x: number, y: number, s: string, color: number = 1) {" line952="        let col = 0" line953="        let p = 0" line954="        let ind2 = 0" line955="        for (let o = 0; o &lt; s.length; o++) {" line956="            p = font[s.charCodeAt(o)]" line957="            for (let k = 0; k &lt; 5; k++) {" line958="                col = 0" line959="                for (let m = 0; m &lt; 5; m++) {" line960="                    if (p &amp; (1 &lt;&lt; (5 * k + m)))" line961="                        col |= (1 &lt;&lt; (m + 1))" line962="                }" line963="                ind2 = (x + o) * 5 * (_ZOOM + 1) + y * 128 + k * (_ZOOM + 1) + 1" line964="                if (color == 0)" line965="                    col = 255 - col" line966="                _screen[ind2] = col" line967="                if (_ZOOM)" line968="                    _screen[ind2 + 1] = col" line969="            }" line970="        }" line971="        set_pos(x * 5, y)" line972="        let ind0 = x * 5 * (_ZOOM + 1) + y * 128" line973="        let buf6 = _screen.slice(ind0, ind2 + 1)" line974="        buf6[0] = 0x40" line975="        pins.i2cWriteBuffer(_I2CAddr, buf6)" line976="    }" line977="" line978="    /**" line979="     * show a number in OLED" line980="     * @param x is X alis, eg: 0" line981="     * @param y is Y alis, eg: 0" line982="     * @param num is the number will be show, eg: 12" line983="     * @param color is number color, eg: 1" line984="     */" line985="    //% blockId=&quot;OLED12864_I2C_NUMBER&quot; block=&quot;显示 数字 在 x %x|y %y|数字 %num|颜色 %color&quot;" line986="    //% parts=OLED12864_I2C trackArgs=0" line987="    //% group=&quot;OLED显示屏&quot; subcategory=执行器" line988="    //% weight=80 blockGap=10 color=#0855AA" line989="    export function showNumber(x: number, y: number, num: number, color: number = 1) {" line990="        showString(x, y, num.toString(), color)" line991="    }" line992="" line993="    /**" line994="     * draw / redraw screen" line995="     */" line996="    //% blockId=&quot;OLED12864_I2C_DRAW&quot; block=&quot;画&quot;" line997="    //% parts=OLED12864_I2C trackArgs=0" line998="    //% group=&quot;OLED显示屏&quot; subcategory=执行器" line999="    //% weight=64 blockGap=10 color=#0855AA" line1000="    export function draw() {" line1001="        set_pos()" line1002="        pins.i2cWriteBuffer(_I2CAddr, _screen)" line1003="    }" line1004="" line1005="    /**" line1006="     * clear screen" line1007="     */" line1008="    //% blockId=&quot;OLED12864_I2C_CLEAR&quot; block=&quot;清除&quot;" line1009="    //% parts=OLED12864_I2C trackArgs=0" line1010="    //% group=&quot;OLED显示屏&quot; subcategory=执行器" line1011="    //% weight=63 blockGap=10 color=#0855AA" line1012="    export function clear() {" line1013="        _screen.fill(0)" line1014="        _screen[0] = 0x40" line1015="        draw()" line1016="    }" line1017="" line1018="    /**" line1019="     * OLED initialize" line1020="     * @param addr is i2c addr, eg: 60" line1021="     */" line1022="    //% blockId=&quot;OLED12864_I2C_init&quot; block=&quot;初始化 OLED 地址为 %addr&quot;" line1023="    //% parts=OLED12864_I2C trackArgs=0" line1024="    //% weight=85 blockGap=10" line1025="    //% group=&quot;OLED显示屏&quot; subcategory=执行器" line1026="    //% blockGap=10  color=#0855AA" line1027="    export function init(addr: number) {" line1028="        _I2CAddr = addr;" line1029="        cmd1(0xAE)       // SSD1306_DISPLAYOFF" line1030="        cmd1(0xA4)       // SSD1306_DISPLAYALLON_RESUME" line1031="        cmd2(0xD5, 0xF0) // SSD1306_SETDISPLAYCLOCKDIV" line1032="        cmd2(0xA8, 0x3F) // SSD1306_SETMULTIPLEX" line1033="        cmd2(0xD3, 0x00) // SSD1306_SETDISPLAYOFFSET" line1034="        cmd1(0 | 0x0)    // line #SSD1306_SETSTARTLINE" line1035="        cmd2(0x8D, 0x14) // SSD1306_CHARGEPUMP" line1036="        cmd2(0x20, 0x00) // SSD1306_MEMORYMODE" line1037="        cmd3(0x21, 0, 127) // SSD1306_COLUMNADDR" line1038="        cmd3(0x22, 0, 63)  // SSD1306_PAGEADDR" line1039="        cmd1(0xa0 | 0x1) // SSD1306_SEGREMAP" line1040="        cmd1(0xc8)       // SSD1306_COMSCANDEC" line1041="        cmd2(0xDA, 0x12) // SSD1306_SETCOMPINS" line1042="        cmd2(0x81, 0xCF) // SSD1306_SETCONTRAST" line1043="        cmd2(0xd9, 0xF1) // SSD1306_SETPRECHARGE" line1044="        cmd2(0xDB, 0x40) // SSD1306_SETVCOMDETECT" line1045="        cmd1(0xA6)       // SSD1306_NORMALDISPLAY" line1046="        cmd2(0xD6, 1)    // zoom on" line1047="        cmd1(0xAF)       // SSD1306_DISPLAYON" line1048="        clear()" line1049="        _ZOOM = 1" line1050="    }" line1051="" line1052="    /**" line1053="     * A NeoPixel strip" line1054="     */" line1055="    export class Strip {" line1056="        buf: Buffer;" line1057="        pin: DigitalPin;" line1058="        // TODO: encode as bytes instead of 32bit" line1059="        brightness: number;" line1060="        start: number; // start offset in LED strip" line1061="        _length: number; // number of LEDs" line1062="        _mode: NeoPixelMode;" line1063="        _matrixWidth: number; // number of leds in a matrix - if any" line1064="" line1065="        /**" line1066="         * Shows all LEDs to a given color (range 0-255 for r, g, b)." line1067="         * @param rgb RGB color of the LED" line1068="         */" line1069="        //% blockId=&quot;neopixel_set_strip_color&quot; block=&quot;%strip|显示 颜色 %rgb=neopixel_colors&quot;" line1070="        //% strip.defl=strip" line1071="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1072="        //% color=#2699BF blockGap=10" line1073="        showColor(rgb: number) {" line1074="            rgb = rgb &gt;&gt; 0;" line1075="            this.setAllRGB(rgb);" line1076="            this.show();" line1077="        }" line1078="" line1079="        /**" line1080="         * Shows a rainbow pattern on all LEDs." line1081="         * @param startHue the start hue value for the rainbow, eg: 1" line1082="         * @param endHue the end hue value for the rainbow, eg: 360" line1083="         */" line1084="        //% blockId=&quot;neopixel_set_strip_rainbow&quot; block=&quot;%strip|显示 彩虹 从 %startHue|到 %endHue&quot;" line1085="        //% strip.defl=strip" line1086="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot; " line1087="        //% color=#2699BF blockGap=10" line1088="        showRainbow(startHue: number = 1, endHue: number = 360) {" line1089="            if (this._length &lt;= 0) return;" line1090="" line1091="            startHue = startHue &gt;&gt; 0;" line1092="            endHue = endHue &gt;&gt; 0;" line1093="            const saturation = 100;" line1094="            const luminance = 50;" line1095="            const steps = this._length;" line1096="            const direction = HueInterpolationDirection.Clockwise;" line1097="" line1098="            //hue" line1099="            const h1 = startHue;" line1100="            const h2 = endHue;" line1101="            const hDistCW = ((h2 + 360) - h1) % 360;" line1102="            const hStepCW = Math.idiv((hDistCW * 100), steps);" line1103="            const hDistCCW = ((h1 + 360) - h2) % 360;" line1104="            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);" line1105="            let hStep: number;" line1106="            if (direction === HueInterpolationDirection.Clockwise) {" line1107="                hStep = hStepCW;" line1108="            } else if (direction === HueInterpolationDirection.CounterClockwise) {" line1109="                hStep = hStepCCW;" line1110="            } else {" line1111="                hStep = hDistCW &lt; hDistCCW ? hStepCW : hStepCCW;" line1112="            }" line1113="            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation" line1114="" line1115="            //sat" line1116="            const s1 = saturation;" line1117="            const s2 = saturation;" line1118="            const sDist = s2 - s1;" line1119="            const sStep = Math.idiv(sDist, steps);" line1120="            const s1_100 = s1 * 100;" line1121="" line1122="            //lum" line1123="            const l1 = luminance;" line1124="            const l2 = luminance;" line1125="            const lDist = l2 - l1;" line1126="            const lStep = Math.idiv(lDist, steps);" line1127="            const l1_100 = l1 * 100" line1128="" line1129="            //interpolate" line1130="            if (steps === 1) {" line1131="                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))" line1132="            } else {" line1133="                this.setPixelColor(0, hsl(startHue, saturation, luminance));" line1134="                for (let q = 1; q &lt; steps - 1; q++) {" line1135="                    const r = Math.idiv((h1_100 + q * hStep), 100) + 360;" line1136="                    const s = Math.idiv((s1_100 + q * sStep), 100);" line1137="                    const t = Math.idiv((l1_100 + q * lStep), 100);" line1138="                    this.setPixelColor(q, hsl(r, s, t));" line1139="                }" line1140="                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));" line1141="            }" line1142="            this.show();" line1143="        }" line1144="" line1145="        /**" line1146="         * Displays a vertical bar graph based on the `value` and `high` value." line1147="         * If `high` is 0, the chart gets adjusted automatically." line1148="         * @param value current value to plot" line1149="         * @param high maximum value, eg: 255" line1150="         */" line1151="        //% blockId=neopixel_show_bar_graph block=&quot;%strip|显示 柱状图 从 %value|到 %high&quot;" line1152="        //% icon=&quot;\uf080&quot;" line1153="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1154="        //% color=#2699BF blockGap=10" line1155="        showBarGraph(value: number, high: number): void {" line1156="            if (high &lt;= 0) {" line1157="                this.clear();" line1158="                this.setPixelColor(0, NeoPixelColors.Yellow);" line1159="                this.show();" line1160="                return;" line1161="            }" line1162="" line1163="            value = Math.abs(value);" line1164="            const u = this._length;" line1165="            const n1 = u - 1;" line1166="            let v = Math.idiv((value * u), high);" line1167="            if (v == 0) {" line1168="                this.setPixelColor(0, 0x666600);" line1169="                for (let w = 1; w &lt; u; ++w)" line1170="                    this.setPixelColor(w, 0);" line1171="            } else {" line1172="                for (let f = 0; f &lt; u; ++f) {" line1173="                    if (f &lt;= v) {" line1174="                        const g = Math.idiv(f * 255, n1);" line1175="                        this.setPixelColor(f, ICbit.rgb(g, 0, 255 - g));" line1176="                    }" line1177="                    else this.setPixelColor(f, 0);" line1178="                }" line1179="            }" line1180="            this.show();" line1181="        }" line1182="" line1183="        /**" line1184="         * Set LED to a given color (range 0-255 for r, g, b)." line1185="         * You need to call ``show`` to make the changes visible." line1186="         * @param pixeloffset position of the NeoPixel in the strip" line1187="         * @param rgb RGB color of the LED" line1188="         */" line1189="        //% blockId=&quot;neopixel_set_pixel_color&quot; block=&quot;%strip|设置 pixel 颜色 在 %pixeloffset|到 %rgb=neopixel_colors&quot;" line1190="        //% strip.defl=strip" line1191="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1192="        //% color=#2699BF blockGap=10" line1193="        setPixelColor(pixeloffset: number, rgb: number): void {" line1194="            this.setPixelRGB(pixeloffset &gt;&gt; 0, rgb &gt;&gt; 0);" line1195="        }" line1196="" line1197="        /**" line1198="         * Sets the number of pixels in a matrix shaped strip" line1199="         * @param width number of pixels in a row" line1200="         */" line1201="        //% blockId=neopixel_set_matrix_width block=&quot;%strip|设置 矩阵 宽度 %width&quot;" line1202="        //% strip.defl=strip" line1203="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot; " line1204="        //% color=#2699BF blockGap=10" line1205="        setMatrixWidth(width: number) {" line1206="            this._matrixWidth = Math.min(this._length, width &gt;&gt; 0);" line1207="        }" line1208="" line1209="        /**" line1210="         * Set LED to a given color (range 0-255 for r, g, b) in a matrix shaped strip" line1211="         * You need to call ``show`` to make the changes visible." line1212="         * @param x horizontal position" line1213="         * @param y horizontal position" line1214="         * @param rgb RGB color of the LED" line1215="         */" line1216="        //% blockId=&quot;neopixel_set_matrix_color&quot; block=&quot;%strip|设置 矩阵 颜色 在 x %x|y %y|到 %rgb=neopixel_colors&quot;" line1217="        //% strip.defl=strip" line1218="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1219="        //% color=#2699BF blockGap=10" line1220="        setMatrixColor(x: number, y: number, rgb: number) {" line1221="            if (this._matrixWidth &lt;= 0) return; // not a matrix, ignore" line1222="            x = x &gt;&gt; 0;" line1223="            y = y &gt;&gt; 0;" line1224="            rgb = rgb &gt;&gt; 0;" line1225="            const cols = Math.idiv(this._length, this._matrixWidth);" line1226="            if (x &lt; 0 || x &gt;= this._matrixWidth || y &lt; 0 || y &gt;= cols) return;" line1227="            let i2 = x + y * this._matrixWidth;" line1228="            this.setPixelColor(i2, rgb);" line1229="        }" line1230="" line1231="        /**" line1232="         * For NeoPixels with RGB+W LEDs, set the white LED brightness. This only works for RGB+W NeoPixels." line1233="         * @param pixeloffset position of the LED in the strip" line1234="         * @param white brightness of the white LED" line1235="         */" line1236="        //% blockId=&quot;neopixel_set_pixel_white&quot; block=&quot;%strip|设置 pixel 白色 LED 在 %pixeloffset|到 %white&quot;" line1237="        //% strip.defl=strip" line1238="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1239="        //% color=#2699BF blockGap=10" line1240="        setPixelWhiteLED(pixeloffset: number, white: number): void {" line1241="            if (this._mode === NeoPixelMode.RGBW) {" line1242="                this.setPixelW(pixeloffset &gt;&gt; 0, white &gt;&gt; 0);" line1243="            }" line1244="        }" line1245="" line1246="        /**" line1247="         * Send all the changes to the strip." line1248="         */" line1249="        //% blockId=&quot;neopixel_show&quot; block=&quot;%strip|显示&quot;" line1250="        //% strip.defl=strip" line1251="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1252="        //% color=#2699BF blockGap=10" line1253="        show() {" line1254="            // only supported in beta" line1255="            // ws2812b.setBufferMode(this.pin, this._mode);" line1256="            // ws2812b.sendBuffer(this.buf, this.pin);" line1257="        }" line1258="" line1259="        /**" line1260="         * Turn off all LEDs." line1261="         * You need to call ``show`` to make the changes visible." line1262="         */" line1263="        //% blockId=&quot;neopixel_clear&quot; block=&quot;%strip|清除&quot;" line1264="        //% strip.defl=strip" line1265="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1266="        //% color=#2699BF blockGap=10" line1267="        clear(): void {" line1268="            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line1269="            this.buf.fill(0, this.start * stride, this._length * stride);" line1270="        }" line1271="" line1272="        /**" line1273="         * Gets the number of pixels declared on the strip" line1274="         */" line1275="        //% blockId=&quot;neopixel_length&quot; block=&quot;%strip|长度&quot;" line1276="        //% strip.defl=strip" line1277="        //% weight=32" line1278="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1279="        //% color=#2699BF blockGap=10" line1280="        length() {" line1281="            return this._length;" line1282="        }" line1283="" line1284="        /**" line1285="         * Set the brightness of the strip. This flag only applies to future operation." line1286="         * @param brightness a measure of LED brightness in 0-255. eg: 255" line1287="         */" line1288="        //% blockId=&quot;neopixel_set_brightness&quot; block=&quot;%strip|设置 亮度 %brightness&quot;" line1289="        //% strip.defl=strip" line1290="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1291="        //% color=#2699BF blockGap=10" line1292="        setBrightness(brightness: number): void {" line1293="            this.brightness = brightness &amp; 0xff;" line1294="        }" line1295="" line1296="        /**" line1297="         * Apply brightness to current colors using a quadratic easing function." line1298="         **/" line1299="        //% blockId=&quot;neopixel_each_brightness&quot; block=&quot;%strip|清除 亮度&quot;" line1300="        //% strip.defl=strip" line1301="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1302="        //% color=#2699BF blockGap=10" line1303="        easeBrightness(): void {" line1304="            const stride2 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line1305="            const br = this.brightness;" line1306="            const buf7 = this.buf;" line1307="            const end = this.start + this._length;" line1308="            const mid = Math.idiv(this._length, 2);" line1309="            for (let i3 = this.start; i3 &lt; end; ++i3) {" line1310="                const k2 = i3 - this.start;" line1311="                const ledoffset = i3 * stride2;" line1312="                const br2 = k2 &gt; mid" line1313="                    ? Math.idiv(255 * (this._length - 1 - k2) * (this._length - 1 - k2), (mid * mid))" line1314="                    : Math.idiv(255 * k2 * k2, (mid * mid));" line1315="                const r2 = (buf7[ledoffset + 0] * br2) &gt;&gt; 8; buf7[ledoffset + 0] = r2;" line1316="                const g2 = (buf7[ledoffset + 1] * br2) &gt;&gt; 8; buf7[ledoffset + 1] = g2;" line1317="                const b2 = (buf7[ledoffset + 2] * br2) &gt;&gt; 8; buf7[ledoffset + 2] = b2;" line1318="                if (stride2 == 4) {" line1319="                    const w2 = (buf7[ledoffset + 3] * br2) &gt;&gt; 8; buf7[ledoffset + 3] = w2;" line1320="                }" line1321="            }" line1322="        }" line1323="" line1324="        /**" line1325="         * Create a range of LEDs." line1326="         * @param start offset in the LED strip to start the range" line1327="         * @param length number of LEDs in the range. eg: 4" line1328="         */" line1329="        //% blockId=&quot;neopixel_range&quot; block=&quot;%strip|值域 从 %start|到 %length|leds&quot;" line1330="        //% strip.defl=strip" line1331="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1332="        //% blockSetVariable=range" line1333="        //% weight= 52" line1334="        //% color=#2699BF blockGap=10" line1335="        range(start: number, length: number): Strip {" line1336="            start = start &gt;&gt; 0;" line1337="            length = length &gt;&gt; 0;" line1338="            let strip = new Strip();" line1339="            strip.buf = this.buf;" line1340="            strip.pin = this.pin;" line1341="            strip.brightness = this.brightness;" line1342="            strip.start = this.start + Math.clamp(0, this._length - 1, start);" line1343="            strip._length = Math.clamp(0, this._length - (strip.start - this.start), length);" line1344="            strip._matrixWidth = 0;" line1345="            strip._mode = this._mode;" line1346="            return strip;" line1347="        }" line1348="" line1349="        /**" line1350="         * Shift LEDs forward and clear with zeros." line1351="         * You need to call ``show`` to make the changes visible." line1352="         * @param offset number of pixels to shift forward, eg: 1" line1353="         */" line1354="        //% blockId=&quot;neopixel_shift&quot; block=&quot;%strip|移动 pixels %offset&quot;" line1355="        //% strip.defl=strip" line1356="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1357="        //% color=#2699BF blockGap=10" line1358="        //% weight= 50" line1359="        shift(offset: number = 1): void {" line1360="            offset = offset &gt;&gt; 0;" line1361="            const stride3 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line1362="            this.buf.shift(-offset * stride3, this.start * stride3, this._length * stride3)" line1363="        }" line1364="" line1365="        /**" line1366="         * Rotate LEDs forward." line1367="         * You need to call ``show`` to make the changes visible." line1368="         * @param offset number of pixels to rotate forward, eg: 1" line1369="         */" line1370="        //% blockId=&quot;neopixel_rotate&quot; block=&quot;%strip|旋转 pixels %offset&quot;" line1371="        //% strip.defl=strip" line1372="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1373="        //% color=#2699BF blockGap=10" line1374="        //% weight= 50" line1375="        rotate(offset: number = 1): void {" line1376="            offset = offset &gt;&gt; 0;" line1377="            const stride4 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line1378="            this.buf.rotate(-offset * stride4, this.start * stride4, this._length * stride4)" line1379="        }" line1380="" line1381="        /**" line1382="         * Set the pin where the neopixel is connected, defaults to P0." line1383="         */" line1384="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1385="        //% color=#2699BF blockGap=10" line1386="        setPin(pin: DigitalPin): void {" line1387="            this.pin = pin;" line1388="            pins.digitalWritePin(this.pin, 0);" line1389="            // don't yield to avoid races on initialization" line1390="        }" line1391="" line1392="        /**" line1393="         * Estimates the electrical current (mA) consumed by the current light configuration." line1394="         */" line1395="        //% blockId=neopixel_power block=&quot;%strip|电力 (mA)&quot;" line1396="        //% strip.defl=strip" line1397="        //% weight=32" line1398="        //% advanced= true" line1399="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1400="        //% color=#2699BF blockGap=10" line1401="        power(): number {" line1402="            const stride5 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line1403="            const end2 = this.start + this._length;" line1404="            let p2 = 0;" line1405="            for (let i4 = this.start; i4 &lt; end2; ++i4) {" line1406="                const ledoffset2 = i4 * stride5;" line1407="                for (let j2 = 0; j2 &lt; stride5; ++j2) {" line1408="                    p2 += this.buf[i4 + j2];" line1409="                }" line1410="            }" line1411="            return Math.idiv(this.length() * 7, 10) /* 0.7mA per neopixel */" line1412="                + Math.idiv(p2 * 480, 10000); /* rought approximation */" line1413="        }" line1414="" line1415="        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {" line1416="            if (this._mode === NeoPixelMode.RGB_RGB) {" line1417="                this.buf[offset + 0] = red;" line1418="                this.buf[offset + 1] = green;" line1419="            } else {" line1420="                this.buf[offset + 0] = green;" line1421="                this.buf[offset + 1] = red;" line1422="            }" line1423="            this.buf[offset + 2] = blue;" line1424="        }" line1425="" line1426="        private setAllRGB(rgb: number) {" line1427="            let red = unpackR(rgb);" line1428="            let green = unpackG(rgb);" line1429="            let blue = unpackB(rgb);" line1430="" line1431="            const br3 = this.brightness;" line1432="            if (br3 &lt; 255) {" line1433="                red = (red * br3) &gt;&gt; 8;" line1434="                green = (green * br3) &gt;&gt; 8;" line1435="                blue = (blue * br3) &gt;&gt; 8;" line1436="            }" line1437="            const end3 = this.start + this._length;" line1438="            const stride6 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line1439="            for (let i5 = this.start; i5 &lt; end3; ++i5) {" line1440="                this.setBufferRGB(i5 * stride6, red, green, blue)" line1441="            }" line1442="        }" line1443="        private setAllW(white: number) {" line1444="            if (this._mode !== NeoPixelMode.RGBW)" line1445="                return;" line1446="" line1447="            let br4 = this.brightness;" line1448="            if (br4 &lt; 255) {" line1449="                white = (white * br4) &gt;&gt; 8;" line1450="            }" line1451="            let buf8 = this.buf;" line1452="            let end4 = this.start + this._length;" line1453="            for (let i6 = this.start; i6 &lt; end4; ++i6) {" line1454="                let ledoffset3 = i6 * 4;" line1455="                buf8[ledoffset3 + 3] = white;" line1456="            }" line1457="        }" line1458="        private setPixelRGB(pixeloffset: number, rgb: number): void {" line1459="            if (pixeloffset &lt; 0" line1460="                || pixeloffset &gt;= this._length)" line1461="                return;" line1462="" line1463="            let stride7 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line1464="            pixeloffset = (pixeloffset + this.start) * stride7;" line1465="" line1466="            let red2 = unpackR(rgb);" line1467="            let green2 = unpackG(rgb);" line1468="            let blue2 = unpackB(rgb);" line1469="" line1470="            let br5 = this.brightness;" line1471="            if (br5 &lt; 255) {" line1472="                red2 = (red2 * br5) &gt;&gt; 8;" line1473="                green2 = (green2 * br5) &gt;&gt; 8;" line1474="                blue2 = (blue2 * br5) &gt;&gt; 8;" line1475="            }" line1476="            this.setBufferRGB(pixeloffset, red2, green2, blue2)" line1477="        }" line1478="        private setPixelW(pixeloffset: number, white: number): void {" line1479="            if (this._mode !== NeoPixelMode.RGBW)" line1480="                return;" line1481="" line1482="            if (pixeloffset &lt; 0" line1483="                || pixeloffset &gt;= this._length)" line1484="                return;" line1485="" line1486="            pixeloffset = (pixeloffset + this.start) * 4;" line1487="" line1488="            let br6 = this.brightness;" line1489="            if (br6 &lt; 255) {" line1490="                white = (white * br6) &gt;&gt; 8;" line1491="            }" line1492="            let buf9 = this.buf;" line1493="            buf9[pixeloffset + 3] = white;" line1494="        }" line1495="    }" line1496="" line1497="    /**" line1498="     * Create a new NeoPixel driver for `numleds` LEDs." line1499="     * @param pin the pin where the neopixel is connected." line1500="     * @param numleds number of leds in the strip, eg: 24,30,60,64" line1501="     */" line1502="    //% blockId=&quot;neopixel_create&quot; block=&quot;NeoPixel 在 端口 %pin|用 %numleds| leds 模式 %mode&quot;" line1503="    //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1504="    //% trackArgs=0,2" line1505="    //% blockSetVariable=strip" line1506="    //% color=#2699BF blockGap=10" line1507="    //% weight=51" line1508="    export function create(pin: DigitalPin, numleds: number, mode: NeoPixelMode): Strip {" line1509="        let strip2 = new Strip();" line1510="        let stride8 = mode === NeoPixelMode.RGBW ? 4 : 3;" line1511="        strip2.buf = pins.createBuffer(numleds * stride8);" line1512="        strip2.start = 0;" line1513="        strip2._length = numleds;" line1514="        strip2._mode = mode || NeoPixelMode.RGB;" line1515="        strip2._matrixWidth = 0;" line1516="        strip2.setBrightness(128)" line1517="        strip2.setPin(pin)" line1518="        return strip2;" line1519="    }" line1520="" line1521="    /**" line1522="     * Converts red, green, blue channels into a RGB color" line1523="     * @param red value of the red channel between 0 and 255. eg: 255" line1524="     * @param green value of the green channel between 0 and 255. eg: 255" line1525="     * @param blue value of the blue channel between 0 and 255. eg: 255" line1526="     */" line1527="    //% blockId=&quot;neopixel_rgb&quot; block=&quot;红 %red|绿 %green|蓝 %blue&quot;" line1528="    //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1529="    //% weight=32" line1530="    //% color=#2699BF blockGap=10" line1531="    export function rgb(red: number, green: number, blue: number): number {" line1532="        return packRGB(red, green, blue);" line1533="    }" line1534="" line1535="    /**" line1536="     * Gets the RGB value of a known color" line1537="    */" line1538="    //% blockId=&quot;neopixel_colors&quot; block=&quot;%color&quot;" line1539="    //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1540="    //% weight=32" line1541="    //% color=#2699BF blockGap=10" line1542="    export function colors(color: NeoPixelColors): number {" line1543="        return color;" line1544="    }" line1545="" line1546="    function packRGB(a: number, b: number, c: number): number {" line1547="        return ((a &amp; 0xFF) &lt;&lt; 16) | ((b &amp; 0xFF) &lt;&lt; 8) | (c &amp; 0xFF);" line1548="    }" line1549="" line1550="    function unpackR(rgb: number): number {" line1551="        let r3 = (rgb &gt;&gt; 16) &amp; 0xFF;" line1552="        return r3;" line1553="    }" line1554="    " line1555="    function unpackG(rgb: number): number {" line1556="        let g3 = (rgb &gt;&gt; 8) &amp; 0xFF;" line1557="        return g3;" line1558="    }" line1559="" line1560="    function unpackB(rgb: number): number {" line1561="        let b3 = (rgb) &amp; 0xFF;" line1562="        return b3;" line1563="    }" line1564="" line1565="    /**" line1566="     * Converts a hue saturation luminosity value into a RGB color" line1567="     * @param h hue from 0 to 360" line1568="     * @param s saturation from 0 to 99" line1569="     * @param l luminosity from 0 to 99" line1570="     */" line1571="    //% blockId=neopixelHSL block=&quot;色度 %h|饱和度 %s|亮度 %l&quot;" line1572="    //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1573="    //% weight=32" line1574="    //% color=#2699BF blockGap=10" line1575="    export function hsl(h: number, s: number, l: number): number {" line1576="        h = Math.round(h);" line1577="        s = Math.round(s);" line1578="        l = Math.round(l);" line1579="" line1580="        h = h % 360;" line1581="        s = Math.clamp(0, 99, s);" line1582="        l = Math.clamp(0, 99, l);" line1583="        let c2 = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) &lt;&lt; 8), 10000); //chroma, [0,255]" line1584="        let h12 = Math.idiv(h, 60);//[0,6]" line1585="        let h22 = Math.idiv((h - h12 * 60) * 256, 60);//[0,255]" line1586="        let temp = Math.abs((((h12 % 2) &lt;&lt; 8) + h22) - 256);" line1587="        let x = (c2 * (256 - (temp))) &gt;&gt; 8;//[0,255], second largest component of this color" line1588="        let r$: number;" line1589="        let g$: number;" line1590="        let b$: number;" line1591="        if (h12 == 0) {" line1592="            r$ = c2; g$ = x; b$ = 0;" line1593="        } else if (h12 == 1) {" line1594="            r$ = x; g$ = c2; b$ = 0;" line1595="        } else if (h12 == 2) {" line1596="            r$ = 0; g$ = c2; b$ = x;" line1597="        } else if (h12 == 3) {" line1598="            r$ = 0; g$ = x; b$ = c2;" line1599="        } else if (h12 == 4) {" line1600="            r$ = x; g$ = 0; b$ = c2;" line1601="        } else if (h12 == 5) {" line1602="            r$ = c2; g$ = 0; b$ = x;" line1603="        }" line1604="        let m2 = Math.idiv((Math.idiv((l * 2 &lt;&lt; 8), 100) - c2), 2);" line1605="        let r4 = r$ + m2;" line1606="        let g4 = g$ + m2;" line1607="        let b4 = b$ + m2;" line1608="        return packRGB(r4, g4, b4);" line1609="    }" line1610="" line1611="    export enum HueInterpolationDirection {" line1612="        Clockwise," line1613="        CounterClockwise," line1614="        Shortest" line1615="    }" line1616="}" numlines="1617"></mutation></block></next></block></next></block></next></block></next></block></statement></block></xml>